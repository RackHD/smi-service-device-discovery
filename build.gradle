apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.sonarqube'
apply plugin: 'nebula.rpm'
apply plugin: 'nebula.deb'
apply plugin: "com.github.hierynomus.license"
//apply plugin: 'nebula.lint'

// rpm/deb package variables
def _vendor = 'Dell'
def _license = 'Proprietary'
def _group = ''
def _url = 'http://support.dell.com'
def _arch = 'x86_64'
def _os = 'LINUX'
def _release = 1
def _sourcePaths=[]


sourceCompatibility = 1.8
version = "${version}"
dockerTag = "${dockerTag}"
group = 'com.dell.isg.smi'

buildscript {
	ext {
		springVersion = '4.3.6.RELEASE'
    	springBootVersion = '1.5.3.RELEASE'
    	springCloudVersion = 'Camden.SR5'
    	vaadinVersion = '8.0.6'
        vaadinSpringVersion = '2.0.1'
        cfAppVersion = '1.0.9' 
	}
   repositories {
	maven {url "https://plugins.gradle.org/m2/"}
	maven {url "http://maven.vaadin.com/vaadin-addons" }
	mavenLocal()
    mavenCentral()
  }
  dependencies {
  	classpath "io.spring.gradle:dependency-management-plugin:+"
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	classpath(group: 'com.netflix.nebula', name: 'gradle-ospackage-plugin', version: '+' )
	classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:+"
	classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
	//classpath 'com.netflix.nebula:gradle-lint-plugin:latest.release'
  }
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

//gradleLint {
//  rules  = ['dependency-parentheses','overridden-dependency-version','duplicate-dependency-class', 'all-dependency','unused-dependency']
//}

sonarqube {
    properties {
        property "sonar.projectName", "SMI :: Service :: Device Discovery"
        property "sonar.projectKey", "org.sonarqube:service-device-discovery"
    }
}


dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
	}
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Dell device discovery jar',
                   'Implementation-Version': version
    }
	baseName = 'service-device-discovery'
}

springBoot {
    executable = true
}

repositories {
	maven {url "http://repository.springsource.com/maven/bundles/release" }
    maven {url "http://repository.springsource.com/maven/bundles/external"}
	maven {url "https://plugins.gradle.org/m2/"}
	maven {url "http://maven.vaadin.com/vaadin-addons" }
	mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'com.dell.isg.smi:adapter-server:1.0.55'
	compile 'com.dell.isg.smi:adapter-chassis:1.0.29'
    compile 'com.dell.isg.smi:commons-elm:1.0.76'
    compile 'com.dell.isg.smi:commons-utilities:1.0.32'
	compile 'com.dell.isg.smi:commons-model:1.0.89'
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile 'org.springframework.cloud:spring-cloud-starter-consul-all'
	compile "org.springframework:spring-web"
	compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
	compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
	compile group: 'commons-io', name: 'commons-io', version: '2.5'
	compile group: "io.springfox", name: "springfox-swagger2", version: "2.7.0"
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'
    compile group: 'com.github.cverges.expect4j', name: 'expect4j', version: '1.6'
	testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile("org.springframework.boot:spring-boot-starter-test")
	
	compile "com.vaadin:vaadin-server:${vaadinVersion}"
	compile "com.vaadin:vaadin-push:${vaadinVersion}"
	compile "com.vaadin:vaadin-client-compiled:${vaadinVersion}"
	compile "com.vaadin:vaadin-themes:${vaadinVersion}"
	compile("org.vaadin:viritin:2.0.beta2")
    compile("com.vaadin:vaadin-spring-boot-starter:${vaadinSpringVersion}")
    compile "de.codecentric.vaadin:copy2clipboard:0.2.4"
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.0.pr2'
	//compile group: 'org.vaadin.spring', name: 'spring-vaadin-eventbus', version: '0.0.5.RELEASE'
	compile group: 'org.vaadin.spring.extensions', name: 'vaadin-spring-ext-boot', version:'2.0.0.RELEASE'
    //compile group: 'org.vaadin.spring.extensions', name: 'vaadin-spring-ext-core', version: '2.0.0.RELEASE'
    
    compile group: 'javax.el', name: 'javax.el-api', version: '2.2.4'
    compile group: 'org.glassfish.web', name: 'javax.el', version: '2.2.4'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.3.4.Final'

}

test {
    systemProperties 'property': 'value'
}

license {
        header rootProject.file('LICENSE')
        includes(["**/*.java", "**/*.properties"])
        strictCheck true
        ignoreFailures true
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
    	ext.name = 'DELL Inc.'
}

task generateRpm(type: Rpm){
	destinationDir = project.file('build/distributions')
	destinationDir.mkdirs()

	vendor = _vendor
	license = _license
	group = _group
	summary = 'Dell device-discovery service'
	description = 'Installs and runs the device-discovery microservice as a linux service'
	url = _url

	packageName = 'dell-smi-service-device-discovery'
	release = _release
	arch = _arch
	os = _os

	from fileTree( "build/libs" ), {
        include "*.jar"
        fileMode = 0755
		user = "root"
		addParentDirs = false
	    into  '/opt/dell/smi/service-device-discovery'
    }

	from fileTree("./"), {
        include "application.yml"
        fileMode = 0755
		//user = "root"
		//addParentDirs = true
	    into  '/opt/dell/smi/service-device-discovery'
    }

	from fileTree( "pkg" ), {
        include "dell-device-discovery.service"
		fileMode = 0777
	    into  '/etc/systemd/system'
    }
	link('/etc/systemd/system/multi-user.target.wants/dell-device-discovery.service', '/etc/systemd/system/dell-device-discovery.service')
}

task generateDeb(type: Deb){
	destinationDir = project.file('build/distributions')
	destinationDir.mkdirs()

	vendor = _vendor
	license = _license
	group = _group
	summary = 'Dell device-discovery service'
	description = 'Installs and runs the device-discovery microservice as a linux service'
	url = _url

	requires( 'postgresql', '9.4', GREATER | EQUAL)

	packageName = 'dell-smi-service-device-discovery'
	release = _release
	arch = 'all'
	os = _os

	from fileTree( "build/libs" ), {
        include "*.jar"
        fileMode = 0755
		user = "root"
		addParentDirs = true
	    into  '/opt/dell/smi/service-device-discovery'
    }

	from fileTree("./"), {
        include "application.yml"
        fileMode = 0755
		//user = "root"
		//addParentDirs = true
	    into  '/opt/dell/smi/service-device-discovery'
    }

	from fileTree( "pkg" ), {
        include "dell-device-discovery.service"
		fileMode = 0777
	    into  '/etc/systemd/system'
    }
	link('/etc/systemd/system/multi-user.target.wants/dell-device-discovery.service', '/etc/systemd/system/dell-device-discovery.service')
}


eclipse {
    project{
    	buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
    		
		// assign natures in a groovy fashion:
		natures = ['org.eclipse.buildship.core.gradleprojectnature']
    }
    
    classpath {
       downloadSources=true
    }
}


task buildSourcePathsArray(dependsOn: 'eclipseClasspath' ){
	doLast{
		def classpathFile = file('.classpath')
		if( classpathFile.exists() ) {
			def cpXml = new XmlParser().parse(classpathFile)
			cpXml.classpathentry.each {
				if('lib' == it.@kind ) {
					if( it.@sourcepath == null ){
						println 'missing source jar for:' + it.@path
					}
					else{
					 	_sourcePaths.add(it.@sourcepath)
					}
				}
			}
		}
		 
		def arrayLength = _sourcePaths.size()
		println 'sourcePaths length is:' + arrayLength
	}
}


task dependencySourcesZip(type: Zip, dependsOn: 'buildSourcePathsArray' ) {
	destinationDir = project.file('build/distributions')
	destinationDir.mkdirs()
	baseName = "smi-service-device-discovery-dependency-sources"
	version = "${dockerTag}"
	outputs.upToDateWhen { false }
 
    from _sourcePaths
}
